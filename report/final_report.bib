
@inproceedings{nigam_compiler_2021,
	location = {Virtual {USA}},
	title = {A compiler infrastructure for accelerator generators},
	isbn = {978-1-4503-8317-2},
	url = {https://dl.acm.org/doi/10.1145/3445814.3446712},
	doi = {10.1145/3445814.3446712},
	eventtitle = {{ASPLOS} '21: 26th {ACM} International Conference on Architectural Support for Programming Languages and Operating Systems},
	pages = {804--817},
	booktitle = {Proceedings of the 26th {ACM} International Conference on Architectural Support for Programming Languages and Operating Systems},
	publisher = {{ACM}},
	author = {Nigam, Rachit and Thomas, Samuel and Li, Zhijing and Sampson, Adrian},
	urldate = {2024-05-11},
	date = {2021-04-19},
	langid = {english},
	file = {Submitted Version:/home/arjun/Zotero/storage/K466PTDF/Nigam et al. - 2021 - A compiler infrastructure for accelerator generato.pdf:application/pdf},
}

@report{blelloch_prefix_1990,
	title = {Prefix Sums and Their Applications},
	number = {{CMU}-{CS}-90-190},
	institution = {School of Computer Science, Carnegie Mellon University},
	author = {Blelloch, Guy E.},
	date = {1990-11},
}

@article{nigam_modular_2023,
	title = {Modular Hardware Design with Timeline Types},
	volume = {7},
	issn = {2475-1421},
	url = {https://dl.acm.org/doi/10.1145/3591234},
	doi = {10.1145/3591234},
	abstract = {Modular design is a key challenge for enabling large-scale reuse of hardware modules. Unlike software, however, hardware designs correspond to physical circuits and inherit constraints from them. Timing constraints—which cycle a signal arrives, when an input is read—and structural constraints—how often a multiplier accepts new inputs—are fundamental to hardware interfaces. Existing hardware design languages do not provide a way to encode these constraints; a user must read documentation, build scripts, or in the worst case, a module’s implementation to understand how to use it. We present Filament, a language for modular hardware design that supports the specification and enforcement of timing and structural constraints for statically scheduled pipelines. Filament uses
              timeline types
              , which describe the intervals of clock-cycle time when a given signal is available or required. Filament enables
              safe composition
              of hardware modules, ensures that the resulting designs are correctly pipelined, and predictably lowers them to efficient hardware.},
	pages = {343--367},
	issue = {{PLDI}},
	journaltitle = {Proceedings of the {ACM} on Programming Languages},
	shortjournal = {Proc. {ACM} Program. Lang.},
	author = {Nigam, Rachit and Azevedo De Amorim, Pedro Henrique and Sampson, Adrian},
	urldate = {2024-05-18},
	date = {2023-06-06},
	langid = {english},
	file = {Full Text:/home/arjun/Zotero/storage/YGCX6ITQ/Nigam et al. - 2023 - Modular Hardware Design with Timeline Types.pdf:application/pdf},
}
